/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        to_mo_layer: to_mo_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_MO_LAYER";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        period_colon: period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        at_hash: at_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_HASH";
            bindings = <&kp AT>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        undo_redo: undo_redo {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDO_REDO";
            bindings = <&kp K_UNDO>, <&kp K_REDO>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        copy_paste: copy_paste {
            compatible = "zmk,behavior-mod-morph";
            label = "COPY_PASTE";
            bindings = <&kp K_COPY>, <&kp K_PASTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        space_underscore: space_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_UNDERSCORE";
            bindings = <&kp SPACE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hyphen_equals: hyphen_equals {
            compatible = "zmk,behavior-mod-morph";
            label = "HYPHEN_EQUALS";
            bindings = <&kp MINUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        dollar_percent: dollar_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_PERCENT";
            bindings = <&kp DOLLAR>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        asterik_question: asterik_question {
            compatible = "zmk,behavior-mod-morph";
            label = "ASTERIK_QUESTION";
            bindings = <&kp ASTERISK>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_ampersand: plus_ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_AMPERSAND";
            bindings = <&kp PLUS>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        exclaim_pipe: exclaim_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCLAIM_PIPE";
            bindings = <&kp EXCLAMATION>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        caret_tilde: caret_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "CARET_TILDE";
            bindings = <&kp CARET>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        parenthesis: parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESIS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comparison: comparison {
            compatible = "zmk,behavior-mod-morph";
            label = "COMPARISON";
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        capslock: capslock {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPSLOCK";
            bindings = <&caps_word>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        resest_taskmanager: resest_taskmanager {
            compatible = "zmk,behavior-mod-morph";
            label = "RESEST_TASKMANAGER";
            bindings = <&kp LS(LC(DELETE))>, <&kp LC(LS(ESCAPE))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        rt_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <36 37>;
        };

        th_enter {
            bindings = <&kp RETURN>;
            key-positions = <37 38>;
        };

        mb_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <25 26>;
        };

        wm_tab {
            bindings = <&kp TAB>;
            key-positions = <24 25>;
        };

        rth_delete {
            bindings = <&kp DELETE>;
            key-positions = <36 37 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |    0   |   1   |   2   |   3   |   4   |                                                               |   5   |   6   |   7   |   8   |   9   |
            // |    10  |   11  |   12  |   13  |   14  |   15  |                                               |   16  |   17  |   18  |   19  |   20  |   21  |
            // |    22  |   23  |   24  |   25  |   26  |   27  |                                               |   28  |   29  |   30  |   31  |   32  |   33  |
            // |    34  |   35  |   36  |   37  |   38  |   39  |                                               |   40  |   41  |   42  |   43  |   44  |   45  |   
            // |    46  |   47  |   48  |   49  |   50  |   51  |   52  |   53  |   54  ||  55  |   56  |   57  |   58  |   59  |   60  |   61  |   62  |   63  |
            // |    64  |   65  |   66  |   67  |   68  |       |   69  |   70  |   71  ||  72  |   73  |   74  |       |   75  |   76  |   77  |   78  |   79  |

            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4  &kp F5                                                                                                                           &kp F6  &kp F7  &kp F8  &kp F9         &kp F10
&kp GRAVE   &kp N1        &kp N2        &kp N3  &kp N4  &kp N5                                                                                                   &kp N6          &kp N7  &kp N8  &kp N9  &kp N0         &kp BACKSPACE
&kp TAB     &kp Q         &kp W         &kp M   &kp B   &parenthesis                                                                                             &hyphen_equals  &kp K   &kp F   &kp J   &kp Z          &kp DELETE
&kp ESC     &kp S         &kp R         &kp T   &kp H   &kp Y                                                                                                    &period_colon   &kp A   &kp N   &kp O   &kp I          &kp RETURN
&kp LCTRL   &kp V         &kp C         &kp G   &kp D   &kp SQT       &kp LSHFT  &mo 1             &mo 5             &none  &mo 2             &kp RSHFT          &comma_semi     &kp U   &kp L   &kp P   &kp X          &kp RIGHT_CONTROL
&magic 6 0  &kp LEFT_ALT  &kp LEFT_GUI  &to 0   &to 7                 &kp E      &to_mo_layer 3 3  &to_mo_layer 4 4  &none  &to_mo_layer 4 4  &space_underscore                  &none   &none   &none   &kp RIGHT_ALT  &kp RIGHT_GUI
            >;
        };

        lh_mod_layer {
            bindings = <
&none  &none           &none         &none             &none                                                                          &trans  &trans  &trans  &trans  &trans
&none  &none           &none         &none             &none        &none                                                     &trans  &trans  &trans  &trans  &trans  &trans
&none  &kp HOME        &sk LEFT_GUI  &kp UP            &undo_redo   &at_hash                                                  &none   &trans  &trans  &trans  &trans  &trans
&none  &sk LEFT_SHIFT  &kp LEFT      &sk LEFT_CONTROL  &kp RIGHT    &kp A                                                     &none   &trans  &trans  &trans  &trans  &trans
&none  &kp END         &sk LEFT_ALT  &kp DOWN          &copy_paste  &comparison  &none  &none  &none  &trans  &trans  &trans  &none   &trans  &trans  &trans  &trans  &trans
&none  &none           &none         &to 0             &none                     &none  &none  &none  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Left Hand Mods";
        };

        rh_mod_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                          &none           &none              &none          &none                &none
&trans  &trans  &trans  &trans  &trans  &trans                                               &none              &none           &none              &none          &none                &none
&trans  &trans  &trans  &trans  &trans  &trans                                               &kp C_VOL_UP       &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_NEXT     &resest_taskmanager  &none
&trans  &trans  &trans  &trans  &trans  &trans                                               &kp C_MUTE         &sk RGUI        &sk RIGHT_CONTROL  &sk RIGHT_ALT  &sk RSHFT            &none
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &none  &none  &none  &kp C_VOLUME_DOWN  &kp TAB         &kp K_LOCK         &kp LG(D)      &kp LA(F4)           &none
&trans  &trans  &trans  &to 0   &trans          &trans  &trans  &trans  &none  &none  &none                     &none           &none              &none          &none                &none
            >;

            label = "Right Hand Mods";
        };

        num_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &to 0   &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Numbers";
        };

        sym_layer {
            bindings = <
&trans  &trans         &trans         &trans        &trans                                                                              &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans         &trans        &trans        &trans                                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(LT)     &kp LS(GT)     &kp LBKT      &kp RBKT      &kp FSLH                                                      &none   &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(DLLR)   &kp LS(PRCNT)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(STAR)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(POUND)  &kp LS(AT)     &kp LS(LBRC)  &kp LS(RBRC)  &kp BSLH      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans         &to 0         &trans                      &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Symbols";
        };

        func_layer {
            bindings = <
&trans  &trans     &trans  &trans   &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans   &trans   &trans                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LSHFT  &kp F1  &kp F2   &kp F3   &kp F4                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LCTRL  &kp F5  &kp F6   &kp F7   &kp F8                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LALT   &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &to 0    &trans            &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Functions";
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &to 0            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        qwerty_layer {
            bindings = <
&kp ESC         &trans     &trans  &trans  &trans                                                                      &trans    &trans     &trans   &trans    &trans
&kp GRAVE       &kp N1     &kp N2  &kp N3  &kp N4  &kp N5                                                      &kp N6  &kp N7    &kp N8     &kp N9   &kp N0    &kp BSPC
&kp TAB         &kp Q      &kp W   &kp E   &kp R   &kp T                                                       &kp Y   &kp U     &kp I      &kp O    &kp P     &kp BSLH
&caps_word      &kp A      &kp S   &kp D   &kp F   &kp G                                                       &kp H   &kp J     &kp K      &kp L    &kp SEMI  &kp ENTER
&kp LEFT_SHIFT  &kp Z      &kp X   &kp C   &kp V   &kp B   &kp BSPC   &none   &none   &trans  &trans  &kp TAB  &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
&trans          &kp LCTRL  &trans  &to 0   &trans          &kp SPACE  &trans  &trans  &trans  &trans  &kp RET          &kp BSPC  &trans     &trans   &trans    &trans
            >;

            label = "QWERTY";
        };
    };
};
