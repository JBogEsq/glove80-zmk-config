/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        // for MoErgo default behaviors

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // for hold-tap behaviors

        ht_kp_kp: ht_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_mo_kp: ht_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MO_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-unless-interrupted";
        };

        ht_sk_kp: ht_sk_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SK_KP";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ht_to_mo: ht_to_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_MO_LAYER";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ht_sp_us_mo: ht_sp_us_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SP_US_MO";
            bindings = <&mo>, <&space_underscore>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-unless-interrupted";
        };

        ht_mmoto_lnav_kp: ht_mmoto_lnav_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MMOTO_LNAV_KP";
            bindings = <&mmoto_lh_nav>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        // for mod-morph behaviors

        back_del: back_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACK_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        brackets: brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "Brackets";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        braces: braces {
            compatible = "zmk,behavior-mod-morph";
            label = "braces";
            bindings = <&kp LS(LEFT_BRACKET)>, <&kp LS(RIGHT_BRACKET)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        capslock: capslock {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPSLOCK";
            bindings = <&caps_word>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comparison: comparison {
            compatible = "zmk,behavior-mod-morph";
            label = "COMPARISON";
            bindings = <&kp LS(COMMA)>, <&kp LS(PERIOD)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_divide: dot_divide {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_DIVIDE";
            bindings = <&kp DOT>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hyphen_equals: hyphen_equals {
            compatible = "zmk,behavior-mod-morph";
            label = "HYPHEN_EQUALS";
            bindings = <&kp MINUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        parenthesis: parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESIS";
            bindings = <&kp LS(N9)>, <&kp LS(N0)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period_colon: period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_times: plus_times {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_TIMES";
            bindings = <&kp KP_EQUAL>, <&kp KP_MULTIPLY>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        space_underscore: space_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_UNDERSCORE";
            bindings = <&kp SPACE>, <&kp LS(MINUS)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        zero_minus: zero_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "ZERO_MINUS";
            bindings = <&kp KP_NUMBER_0>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmoto_num: mmoto_num {
            compatible = "zmk,behavior-mod-morph";
            label = "MMOTO_NUM";
            bindings = <&mo 4>, <&to 4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmoto_lh_nav: mmoto_lh_nav {
            compatible = "zmk,behavior-mod-morph";
            label = "MMOTO_LH_NAV";
            bindings = <&mo 3>, <&to 3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmoto_rh_mod: mmoto_rh_mod {
            compatible = "zmk,behavior-mod-morph";
            label = "MMOTO_RH_MOD";
            bindings = <&mo 2>, <&to 2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // for tap-dance behaviors

        td_Lsh_moto_num: td_Lsh_moto_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LSH_MOTO_NUM";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&mmoto_num>;
        };

        td_Rsh_moto_num: td_Rsh_moto_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RSH_MOTO_NUM";
            #binding-cells = <0>;
            bindings = <&kp RSHIFT>, <&mmoto_num>;
        };

        td_func: td_func {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_FUNC";
            #binding-cells = <0>;
            bindings = <&mo 6>, <&to 6>;
        };

        td_sym: td_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SYM";
            #binding-cells = <0>;
            bindings = <&mo 5>, <&to 5>;
        };

        excl_ques: excl_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCL_QUES";
            bindings = <&kp EXCLAMATION>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        back_forw_slash: back_forw_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "BACK_FORW_SLASH";
            bindings = <&kp BACKSLASH>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        left_par_exclaim: left_par_exclaim {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_PAR_EXCLAIM";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LS(NUMBER_1)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_par_quest: right_par_quest {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_PAR_QUEST";
            bindings = <&kp LS(N0)>, <&kp LS(SLASH)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_par_ex_qu: td_par_ex_qu {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PAR_EX_QU";
            #binding-cells = <0>;
            bindings = <&left_par_exclaim>, <&right_par_quest>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        periodo_tab {
            bindings = <&kp TAB>;
            key-positions = <40 43>;
        };

        periodn_shift {
            bindings = <&kp RSHIFT>;
            key-positions = <40 42>;
        };

        periodi_enter {
            bindings = <&kp ENTER>;
            key-positions = <44 40>;
        };

        ry_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <39 36>;
        };

        ty_enter {
            bindings = <&kp ENTER>;
            key-positions = <39 35>;
        };

        ty_shift {
            bindings = <&kp LSHFT>;
            key-positions = <39 37>;
        };

        hy_delete {
            bindings = <&kp DELETE>;
            key-positions = <39 38>;
        };

        hyphenf_question {
            bindings = <&kp LS(SLASH)>;
            key-positions = <28 30>;
        };

        hyphenj_exclaim {
            bindings = <&kp LS(N1)>;
            key-positions = <28 31>;
        };

        hyphenz_at {
            bindings = <&kp LS(N2)>;
            key-positions = <28 32>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |    0   |   1   |   2   |   3   |   4   |                                                               |   5   |   6   |   7   |   8   |   9   |
            // |    10  |   11  |   12  |   13  |   14  |   15  |                                               |   16  |   17  |   18  |   19  |   20  |   21  |
            // |    22  |   23  |   24  |   25  |   26  |   27  |                                               |   28  |   29  |   30  |   31  |   32  |   33  |
            // |    34  |   35  |   36  |   37  |   38  |   39  |                                               |   40  |   41  |   42  |   43  |   44  |   45  |   
            // |    46  |   47  |   48  |   49  |   50  |   51  |   52  |   53  |   54  ||  55  |   56  |   57  |   58  |   59  |   60  |   61  |   62  |   63  |
            // |    64  |   65  |   66  |   67  |   68  |       |   69  |   70  |   71  ||  72  |   73  |   74  |       |   75  |   76  |   77  |   78  |   79  |

            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4  &kp F5                                                                                                                                 &kp F6     &kp F7       &kp F8   &kp F9         &kp F10
&kp GRAVE   &kp N1        &kp N2        &kp N3  &kp N4  &kp N5                                                                                                         &kp N6          &kp N7     &kp N8       &kp N9   &kp N0         &kp BACKSPACE
&kp TAB     &kp Q         &kp W         &kp M   &kp B   &td_par_ex_qu                                                                                                  &hyphen_equals  &kp K      &kp F        &kp J    &kp Z          &kp DELETE
&kp ESC     &kp S         &kp R         &kp T   &kp H   &kp Y                                                                                                          &period_colon   &kp A      &kp N        &kp O    &kp I          &kp RETURN
&kp LCTRL   &kp V         &kp C         &kp G   &kp D   &kp APOSTROPHE  &ht_mmoto_lnav_kp 0 ENTER  &td_sym           &mo 7  &none  &td_func          &back_del         &comma_semi     &kp U      &kp L        &kp P    &kp X          &kp RIGHT_CONTROL
&magic 9 0  &kp LEFT_ALT  &kp LEFT_GUI  &to 0   &to 10                  &ht_mo_kp 1 E              &td_Lsh_moto_num  &mo 8  &none  &td_Rsh_moto_num  &ht_sp_us_mo 2 0                  &brackets  &comparison  &braces  &kp RIGHT_ALT  &kp RIGHT_GUI
            >;
        };

        lh_mod_layer {
            bindings = <
&trans  &trans  &trans          &trans        &trans                                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans          &trans        &trans            &trans                                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp P   &kp N           &kp U         &kp B             &kp I                                                         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A   &sk LEFT_SHIFT  &sk LEFT_ALT  &sk LEFT_CONTROL  &sk LEFT_GUI                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp Z   &kp X           &kp C         &kp V             &kp O         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans          &to 0         &trans                          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        rh_mod_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                              &none           &none              &none            &none            &none
&trans  &trans  &trans  &trans  &trans  &trans                                               &none  &none           &none              &none            &none            &none
&trans  &trans  &trans  &trans  &trans  &trans                                               &none  &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_NEXT       &kp SCROLLLOCK   &none
&trans  &trans  &trans  &trans  &trans  &trans                                               &none  &sk RMETA       &sk RIGHT_CONTROL  &sk RIGHT_ALT    &sk RSHFT        &none
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &none  &none  &none  &none  &kp C_VOL_DN    &kp C_MUTE         &kp C_VOLUME_UP  &kp PRINTSCREEN  &none
&trans  &trans  &trans  &to 0   &trans          &trans  &trans  &trans  &none  &none  &none         &none           &none              &none            &none            &none
            >;

            label = "Right Hand Mods";
        };

        lh_nav_layer {
            bindings = <
&none  &none           &none     &none             &none                                                                            &trans  &trans  &trans  &trans  &trans
&none  &none           &none     &none             &none      &none                                                         &trans  &trans  &trans  &trans  &trans  &trans
&none  &kp CAPSLOCK    &none     &kp UP            &kp HOME   &kp PAGE_UP                                                   &none   &trans  &trans  &trans  &trans  &trans
&none  &sk LEFT_SHIFT  &kp LEFT  &sk LEFT_CONTROL  &kp RIGHT  &kp LC(LA(TAB))                                               &none   &trans  &trans  &trans  &trans  &trans
&none  &caps_word      &none     &kp DOWN          &kp END    &kp PAGE_DOWN    &none  &none  &none  &trans  &trans  &trans  &none   &trans  &trans  &trans  &trans  &trans
&none  &none           &none     &to 0             &none                       &none  &none  &none  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Left Hand Mods";
        };

        num_layer {
            bindings = <
&trans  &trans                 &trans  &trans  &trans                                                                                   &trans           &trans           &trans           &trans                     &trans
&trans  &trans                 &trans  &trans  &trans   &trans                                                             &trans       &trans           &trans           &trans           &trans                     &trans
&trans  &kp FSLH               &kp N9  &kp N8  &kp N7   &plus_times                                                        &plus_times  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_DIVIDE              &trans
&trans  &ht_sk_kp LSHFT MINUS  &kp N6  &kp N5  &kp N4   &kp DOT                                                            &kp KP_DOT   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &ht_sk_kp RSHIFT KP_MINUS  &trans
&trans  &kp ENTER              &kp N3  &kp N2  &kp N1   &kp N0       &mo 3      &trans  &trans  &trans  &trans  &mo 2      &kp KP_N0    &kp KP_N1        &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER               &trans
&trans  &trans                 &kp F2  &to 0   &kp TAB               &kp EQUAL  &mo 5   &trans  &trans  &mo 5   &kp EQUAL               &kp TAB          &kp KP_NUMLOCK   &kp F2           &trans                     &trans
            >;

            label = "Numbers";
        };

        sym_layer {
            bindings = <
&trans  &trans         &trans         &trans            &trans                                                                           &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans         &trans            &trans       &trans                                                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp BACKSLASH  &kp LS(EQUAL)  &kp LS(NUMBER_4)  &kp LS(N2)   &kp LS(N3)                                                  &none   &trans  &trans  &trans  &trans  &trans
&trans  &sk LSHFT      &braces        &brackets         &comparison  &kp LS(N1)                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(N5)     &kp LS(N6)     &kp LS(N7)        &kp LS(N8)   &kp SLASH   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans         &to 0             &trans                   &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Symbols";
        };

        func_layer {
            bindings = <
&trans  &trans     &trans  &trans   &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans   &trans   &trans                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LSHFT  &kp F1  &kp F2   &kp F3   &kp F4                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LCTRL  &kp F5  &kp F6   &kp F7   &kp F8                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LALT   &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &to 0    &trans            &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Functions";
        };

        Win_Layer {
            bindings = <
&trans  &trans          &trans     &trans    &trans                                                                     &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans     &trans    &trans     &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LALT        &sk LCTRL  &sk LGUI  &kp LC(A)  &none                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LEFT_SHIFT  &kp LC(X)  &none     &kp LC(V)  &none                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &none           &none      &none     &none      &none   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans     &trans    &trans             &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Windows Quick Actions";
        };

        Mac_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "Mac Quick Actions";
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &to 0            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        qwerty_layer {
            bindings = <
&kp ESC         &kp F1        &kp F2        &kp F3  &kp F4                                                                      &kp F5            &kp F6             &kp F7         &kp F8         &kp F9
&kp GRAVE       &kp N1        &kp N2        &kp N3  &kp N4  &kp N5                                                      &kp N6  &kp N7            &kp N8             &kp N9         &kp N0         &kp BSPC
&kp TAB         &kp Q         &kp W         &kp E   &kp R   &kp T                                                       &kp Y   &kp U             &kp I              &kp O          &kp P          &kp BSLH
&kp CAPSLOCK    &kp A         &kp S         &kp D   &kp F   &kp G                                                       &kp H   &kp J             &kp K              &kp L          &kp SEMI       &kp SQT
&kp LEFT_SHIFT  &kp Z         &kp X         &kp C   &kp V   &kp B   &kp BSPC   &none   &none   &trans  &trans  &kp TAB  &kp N   &kp M             &kp COMMA          &kp DOT        &kp FSLH       &kp RIGHT_SHIFT
&kp LCTRL       &kp LEFT_GUI  &kp LEFT_ALT  &to 0   &trans          &kp SPACE  &trans  &trans  &trans  &trans  &kp RET          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_ALT  &kp RIGHT_GUI  &kp RCTRL
            >;

            label = "QWERTY";
        };
    };
};
